// You are a world-class React architect and frontend expert with 50+ years of combined experience, specializing in enterprise-grade development patterns and best practices.
//
// CONTEXT: React 18+ application
//
// REQUIREMENTS:
// Functional: CRUD operations with validation, Authentication and authorization, RESTful API endpoints
// Non-Functional: High performance (sub-second response), 99.9% uptime availability, Enterprise security standards, Clean, maintainable code structure
//
// ARCHITECTURE: Microservices architecture, SOLID principles adherence
//
// TESTING: Integration tests for APIs, Unit tests (80%+ coverage), Security testing (OWASP), Performance and load testing

// SCAFFOLDING REQUIREMENTS:
// - Create modern React 18+ application with TypeScript
// - Set up proper project structure with src/components/hooks/utils folders
// - Configure build tools (Vite/Webpack) with development and production settings
// - Implement routing with React Router v6 and protected routes
// - Set up state management with Context API or Redux Toolkit
// - Include comprehensive testing setup with Jest and React Testing Library
// - Configure ESLint, Prettier, and pre-commit hooks for code quality
// - Add performance optimization and PWA capabilities
////
// FRAMEWORKS: React 18+, React Router, Redux Toolkit, Zustand
//
// ORIGINALITY REQUIREMENTS:
// - Create UNIQUE implementation with custom business logic specific to [BUSINESS_DOMAIN] domain
// - Use distinctive variable names, method signatures, and class structures for [ENTITY_NAME]
// - Implement domain-specific validation rules and custom business constraints for [FEATURE_NAME]
// - Add unique error handling patterns with [COMPANY_NAME]-specific error codes and messages
// - Include original comments explaining [PROJECT_NAME] business context and implementation decisions
// - Avoid generic boilerplate patterns - create contextual, [BUSINESS_DOMAIN]-driven code
//
// Generate comprehensive React implementation that:
// - Follows enterprise patterns and SOLID principles with unique [BUSINESS_DOMAIN] business logic
// - Includes extensive error handling with [COMPANY_NAME]-specific error messages
// - Implements proper logging with contextual [PROJECT_NAME] business information
// - Uses modern JavaScript/TypeScript features in creative ways for [BUSINESS_DOMAIN]
// - Includes comprehensive test coverage with realistic [ENTITY_NAME] business scenarios
// - Handles edge cases specific to [BUSINESS_DOMAIN] domain and [ENTITY_NAME] requirements
// - Follows security best practices with custom [COMPANY_NAME] validation logic
// - Implements proper documentation with [PROJECT_NAME] business context explanations
/*
 * Generated with CRAFT method for GitHub Copilot - ORIGINALITY FOCUSED
 * 
 * PARAMETERIZED PLACEHOLDERS - Replace with your specific values:
 * - [BUSINESS_DOMAIN] → Your business domain (e-commerce, fintech, healthcare, etc.)
 * - [ENTITY_NAME] → Your actual entity (Customer, Invoice, Patient, etc.)
 * - [FEATURE_NAME] → Your specific feature (UserRegistration, PaymentProcessing, etc.)
 * - [PROJECT_NAME] → Your project name (CustomerPortal, BillingSystem, etc.)
 * - [COMPANY_NAME] → Your company name (Acme Corp, TechSolutions, etc.)
 * 
 * The more specific your business context, the more original the generated code will be!
 */
