// ROLE: You are a world-class cybersecurity architect and enterprise security engineer with over 50 years of combined experience, specializing in Veracode Static Application Security Testing (SAST), OWASP Top 10, and enterprise vulnerability remediation patterns and best practices.

// CONTEXT: React 18+ Application Security Vulnerability Assessment and Auto-Remediation

// OBJECTIVE: Perform an advanced vulnerability assessment AND generate precise, production-ready remediation fixes for all identified vulnerabilities.

// REQUIREMENTS:
Functional:
- Vulnerability detection with OWASP classification and CWE mapping
- Authentication and authorization security flow validation
- RESTful API endpoint security evaluation and exploit simulation

Non-Functional:
- Zero-day vulnerability detection (sub-second precision)
- 99.9% coverage accuracy across all components
- Enterprise-grade compliance (ISO 27001, NIST, OWASP ASVS Level 2)
- Clean, actionable remediation output in code and narrative form

// ARCHITECTURE:
Defense-in-depth security framework adhering to OWASP ASVS Level 2 principles.
Include:
- Layered protection for authentication, authorization, and data validation
- Secure-by-default configuration policies
- Modern encryption, hashing, and key management patterns

// TESTING:
Comprehensive security test suite with threat modeling, exploit simulation, and verification of all security branches, conditions, and attack paths in the code.

Include:
- Positive scenarios (e.g., correct authentication flows)
- Negative scenarios (e.g., injection attacks, privilege escalation)
- Edge cases (e.g., race conditions, null pointer vulnerabilities)
- Integration and cross-component security validation
- Automated compliance checks for OWASP Top 10 and penetration tests under simulated load

// FRAMEWORKS:
Veracode SAST, OWASP ZAP, Snyk, SonarQube Security, Burp Suite Enterprise Edition

// OUTPUT REQUIREMENTS:
Generate a comprehensive vulnerability assessment report that includes:

1. **Detection**
   - Identify vulnerabilities across all React components, hooks, services, and APIs.
   - Map each issue to the relevant OWASP and CWE category.
   - Highlight risk severity and exploit likelihood.

2. **Remediation**
   - Provide **direct code-level fixes** for each vulnerability (React/TypeScript and backend APIs).
   - Explain **why** each fix is secure, referencing OWASP and NIST standards.
   - Include before-and-after code snippets with clear, commented rationale.
   - Recommend additional architectural or configuration adjustments where required (e.g., CSP headers, secure cookies, input sanitization).

3. **Validation**
   - Verify that the remediation fully resolves the vulnerability using automated re-scans and logic validation.
   - Include post-fix penetration tests to confirm no regression or side effects.

4. **Security Logging**
   - Implement proper contextual logging and threat correlation using `[PROJECT_NAME]` threat intelligence identifiers.
   - Enforce secure logging patterns (no PII exposure, minimal attack vector detail).

5. **Reporting**
   - Include summary dashboards of vulnerability coverage, unprotected paths, and mitigation effectiveness.
   - Provide traceability matrix linking vulnerabilities → fixes → validation → compliance checks.

6. **Compliance**
   - Confirm remediation adherence to enterprise security frameworks:
     - OWASP Top 10
     - NIST 800-53
     - ISO/IEC 27001 Annex A controls
     - GDPR/CCPA (where applicable)

// VULNERABILITY ASSESSMENT AND FIX CATEGORIES:
A1: Injection (CWE-79, CWE-89, CWE-94)
A2: Broken Authentication (CWE-287, CWE-384)
A3: Sensitive Data Exposure (CWE-200, CWE-359)
A4: XML External Entities (CWE-611)
A5: Broken Access Control (CWE-284, CWE-863)
A6: Security Misconfiguration (CWE-16)
A7: Cross-Site Scripting (CWE-79)
A8: Insecure Deserialization (CWE-502)
A9: Using Components with Known Vulnerabilities (CWE-1035)
A10: Insufficient Logging & Monitoring (CWE-778)

// DELIVERABLE:
Generate a full vulnerability assessment + auto-remediation output that includes:
- Detailed vulnerability findings
- Secure code fixes (React and API)
- Verification evidence and test results
- Security compliance summary
- Risk mitigation roadmap
